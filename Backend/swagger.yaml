openapi: 3.0.0
info:
  title: Employee Management System API
  description: |
    ## Overview
    This is the API documentation for the Employee Management System. It provides endpoints for:
    - User authentication and account management
    - Employee and department management
    - Workflow and request tracking
    
    ## Authentication
    - The API uses JWT (JSON Web Tokens) for authentication.
    - Include the JWT token in the `Authorization` header for authenticated requests.
    - Example: `Authorization: Bearer {token}`
    
    ## Rate Limiting
    - The API is rate limited to 100 requests per 15 minutes per IP address.
    - Exceeding the limit will result in a 429 (Too Many Requests) response.
    
    ## Error Handling
    - All error responses follow the same format with `status`, `code`, and `message` fields.
    - Validation errors include an `errors` array with field-specific error messages.
  version: 1.0.0
  contact:
    name: API Support
    email: support@employeeapp.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:4000/api
    description: Local development server

paths:
  # Authentication endpoints
  /accounts/authenticate:
    post:
      summary: Authenticate account credentials and return a JWT token and a cookie with a refresh token
      description: Accounts must be verified before authenticating.
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "jason@example.com"
                password:
                  type: string
                  example: "pass123"
              required:
                - email
                - password
      responses:
        "200":
          description: Account details, a JWT access token and a refresh token cookie
          headers:
            Set-Cookie:
              description: "`refreshToken`"
              schema:
                type: string
                example: refreshToken=51872eca5efedcf424db4cf5afd16a9d00ad25b743a034c9c221afc85d18dcd5e4ad6e3f08607550; Path=/; Expires=Tue, 16 Jun 2020 09:14:17 GMT; HttpOnly
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "5eb12e197e06a76ccdefc121"
                  title:
                    type: string
                    example: "Mr"
                  firstName:
                    type: string
                    example: "Jason"
                  lastName:
                    type: string
                    example: "Watmore"
                  email:
                    type: string
                    example: "jason@example.com"
                  role:
                    type: string
                    example: "Admin"
                  created:
                    type: string
                    example: "2020-05-05T09:12:57.848Z"
                  isVerified:
                    type: boolean
                    example: true
                  jwtToken:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1ZWIxMmUxOTdlMDZhNzZjY2RlZmMxMjEiLCJpZCI6IjVlYjEyZTE5N2UwNmE3NmNjZGVmYzEyMSIsImlhdCI6MTU4ODc1ODE1N30.xR9H0STbFOpSkuGA9jHNZOJ6eS7umHHqKRhI807YT1Y"
        "400":
          description: The email or password is incorrect
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Email or password is incorrect"

  # Department endpoints
  /departments:
    get:
      tags: [Departments]
      summary: Get all departments
      description: Retrieve a list of all departments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of departments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
    post:
      tags: [Departments]
      summary: Create a new department
      description: Create a new department (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDepartmentInput'
      responses:
        '201':
          description: Department created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
  
  /departments/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
        description: Department ID
    get:
      tags: [Departments]
      summary: Get department by ID
      description: Retrieve a department by its ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Department found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '404':
          description: Department not found
    put:
      tags: [Departments]
      summary: Update a department
      description: Update a department (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDepartmentInput'
      responses:
        '200':
          description: Department updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
    delete:
      tags: [Departments]
      summary: Delete a department
      description: Delete a department (Admin only)
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Department deleted successfully
        '400':
          description: Cannot delete department with employees
  
  # Employee endpoints
  /employees:
    get:
      tags: [Employees]
      summary: Get all employees
      description: Retrieve a list of all employees with their details
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of employees
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      tags: [Employees]
      summary: Create a new employee
      description: Create a new employee (Admin only)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEmployeeInput'
      responses:
        '201':
          description: Employee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
  
  /employees/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
        description: Employee ID
    get:
      tags: [Employees]
      summary: Get employee by ID
      description: Retrieve an employee by their ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Employee found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
    put:
      tags: [Employees]
      summary: Update an employee
      description: Update an employee (Admin or self)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateEmployeeInput'
      responses:
        '200':
          description: Employee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Employee'
    delete:
      tags: [Employees]
      summary: Delete an employee
      description: Delete an employee (Admin only)
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Employee deleted successfully
  
  /employees/{id}/transfer-department:
    post:
      tags: [Employees]
      summary: Transfer employee to another department
      description: Transfer an employee to a different department (Admin only)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: Employee ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                departmentId:
                  type: integer
                  description: ID of the target department
                reason:
                  type: string
                  description: Reason for the transfer
              required:
                - departmentId
      responses:
        '200':
          description: Employee transferred successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workflow'
  
  # Workflow endpoints
  /workflows:
    get:
      tags: [Workflows]
      summary: Get all workflows
      description: Retrieve a list of all workflows
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of workflows
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  
  /workflows/employee/{employeeId}:
    get:
      tags: [Workflows]
      summary: Get workflows by employee ID
      description: Retrieve workflows for a specific employee
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: employeeId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Employee ID
      responses:
        '200':
          description: A list of workflows for the employee
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Workflow'
  
  # Request endpoints
  /requests:
    get:
      tags: [Requests]
      summary: Get all requests
      description: Retrieve a list of all requests (Admin sees all, users see only their own)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of requests
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
    post:
      tags: [Requests]
      summary: Create a new request
      description: Create a new request
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRequestInput'
      responses:
        '201':
          description: Request created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
  
  /requests/employee/{employeeId}:
    get:
      tags: [Requests]
      summary: Get requests by employee ID
      description: Retrieve requests for a specific employee (Admin can view any, users can only view their own)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: employeeId
          required: true
          schema:
            type: integer
            minimum: 1
          description: Employee ID
      responses:
        '200':
          description: A list of requests for the employee
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
  
  /requests/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema:
          type: integer
          minimum: 1
        description: Request ID
    get:
      tags: [Requests]
      summary: Get request by ID
      description: Retrieve a request by its ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Request found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
    put:
      tags: [Requests]
      summary: Update a request
      description: Update a request (Admin or request owner)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequestInput'
      responses:
        '200':
          description: Request updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
    delete:
      tags: [Requests]
      summary: Delete a request
      description: Delete a request (Admin or request owner)
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Request deleted successfully
  
  /requests/{id}/status:
    put:
      tags: [Requests]
      summary: Update request status
      description: Update the status of a request (Admin only for approval/rejection)
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            minimum: 1
          description: Request ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [pending, approved, rejected, fulfilled]
                  description: New status of the request
              required:
                - status
      responses:
        '200':
          description: Request status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid, or the user does not have access to perform the action
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
    NotFoundError:
      description: Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Not Found"